import datetime

from django.test import TestCase
from django.contrib.auth.models import User
from django.conf import settings

from funfactory.urlresolvers import reverse
from nose.tools import eq_, ok_

from airmozilla.main.models import (
    SuggestedEvent,
    Event,
    Location,
    Channel,
    Category,
    Tag
)


class TestPages(TestCase):
    fixtures = ['airmozilla/manage/tests/main_testdata.json']

    def setUp(self):
        self.user = User.objects.create_superuser('fake', 'fake@f.com', 'fake')
        assert self.client.login(username='fake', password='fake')

    def test_unauthorized(self):
        """ Client with no log in - should be rejected. """
        self.client.logout()
        response = self.client.get(reverse('suggest:start'))
        self.assertRedirects(response, settings.LOGIN_URL
                             + '?next=' + reverse('suggest:start'))

    def test_start(self):
        url = reverse('suggest:start')
        response = self.client.get(url)
        eq_(response.status_code, 200)

        response = self.client.post(url, {'title': 'A New World'})
        eq_(response.status_code, 302)

        event = SuggestedEvent.objects.get(title='A New World')
        url = reverse('suggest:description', args=(event.pk,))
        eq_(event.slug, 'a-new-world')
        self.assertRedirects(response, url)

    def test_start_invalid_entry(self):
        # you can either get a form error if the slug is already
        # taken by an event or if only a title is entered and no slug,
        # but the autogenerated slug is taken

        # know thee fixtures
        event = Event.objects.get(title='Test event', slug='test-event')
        url = reverse('suggest:start')

        response = self.client.post(url, {'title': 'TEST Event'})
        eq_(response.status_code, 200)
        ok_('Form error' in response.content)

        response = self.client.post(
            url,
            {'title': 'Cool Title', 'slug': 'test-event'}
        )
        eq_(response.status_code, 200)
        ok_('Form error' in response.content)

        event.slug = 'cool-title'
        event.save()
        response = self.client.post(url, {'title': 'Cool Title'})
        eq_(response.status_code, 200)
        ok_('Form error' in response.content)

    def test_description(self):
        event = SuggestedEvent.objects.create(
            user=self.user,
            title='Cool Title',
            slug='cool-title',
        )
        url = reverse('suggest:description', args=(event.pk,))
        response = self.client.get(url)
        eq_(response.status_code, 200)

        data = {
            'description': 'This is my cool description ',
            'short_description': ' '
        }

        response = self.client.post(url, data)
        next_url = reverse('suggest:details', args=(event.pk,))
        self.assertRedirects(response, next_url)
        event = SuggestedEvent.objects.get(pk=event.pk)
        eq_(event.description, data['description'].strip())
        eq_(event.short_description, data['short_description'].strip())

        data['short_description'] = 'Really cool '
        response = self.client.post(url, data)
        self.assertRedirects(response, next_url)
        event = SuggestedEvent.objects.get(pk=event.pk)
        eq_(event.description, data['description'].strip())
        eq_(event.short_description, data['short_description'].strip())

        # XXX should there be some length restrictions
        # on `description` or `short_description`?

    def test_details(self):
        event = SuggestedEvent.objects.create(
            user=self.user,
            title='Cool Title',
            slug='cool-title',
            description='Some long description',
            short_description=''
        )
        url = reverse('suggest:details', args=(event.pk,))
        response = self.client.get(url)
        eq_(response.status_code, 200)

        mv = Location.objects.get(name='Mountain View')
        category = Category.objects.get(name='Testing')
        channel = Channel.objects.create(
            name='Security',
            slug='security'
        )
        tag1 = Tag.objects.create(
            name='foo'
        )
        tag2 = Tag.objects.create(
            name='bar'
        )

        future = datetime.datetime.utcnow() + datetime.timedelta(days=30)
        data = {
            'start_time': future.strftime('%Y-%m-%d %H:%M'),
            'timezone': 'US/Pacific',
            'start_time': '',
            'location': mv.pk,
            'privacy': Event.PRIVACY_CONTRIBUTORS,
            'category': category.pk,
            'tags': [tag1.pk, tag2.pk],
            'channels': channel.pk,
            'additional_links': 'http://www.peterbe.com\n',
        }

        response = self.client.post(url, data)
        next_url = reverse('suggest:placeholder', args=(event.pk,))
        self.assertRedirects(response, next_url)

        event = SuggestedEvent.objects.get(pk=event.pk)
        eq_(event.start_time, 'xxx')
        eq_(event.location, mv)
        eq_(event.category, category)
        eq_(event.tags, ['foo', 'bar'])
        eq_(event.channels.all()[0], channel)
        eq_(event.additional_links, data['additional_links'].strip())
